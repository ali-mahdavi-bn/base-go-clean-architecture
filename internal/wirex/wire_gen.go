// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"context"
	"github.com/LyricTian/gin-admin/v10/internal/mods"
	"github.com/LyricTian/gin-admin/v10/internal/mods/account"
	"github.com/LyricTian/gin-admin/v10/internal/mods/account/api"
	"github.com/LyricTian/gin-admin/v10/internal/mods/account/reposetory"
	"github.com/LyricTian/gin-admin/v10/internal/mods/account/usecase"
	"github.com/LyricTian/gin-admin/v10/internal/mods/sys"
	api2 "github.com/LyricTian/gin-admin/v10/internal/mods/sys/api"
	"github.com/LyricTian/gin-admin/v10/internal/mods/sys/biz"
	"github.com/LyricTian/gin-admin/v10/internal/mods/sys/dal"
	"github.com/LyricTian/gin-admin/v10/pkg/util"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	db, cleanup, err := InitDB(ctx)
	if err != nil {
		return nil, nil, err
	}
	cacher, cleanup2, err := InitCacher(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	auther, cleanup3, err := InitAuth(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	trans := &util.Trans{
		DB: db,
	}
	menu := &reposetory.Menu{
		DB: db,
	}
	menuResource := &reposetory.MenuResource{
		DB: db,
	}
	roleMenu := &reposetory.RoleMenu{
		DB: db,
	}
	usecaseMenu := &usecase.Menu{
		Cache:           cacher,
		Trans:           trans,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleMenuDAL:     roleMenu,
	}
	apiMenu := &api.Menu{
		MenuUC: usecaseMenu,
	}
	role := &reposetory.Role{
		DB: db,
	}
	userRole := &reposetory.UserRole{
		DB: db,
	}
	usecaseRole := &usecase.Role{
		Cache:       cacher,
		Trans:       trans,
		RoleDAL:     role,
		RoleMenuDAL: roleMenu,
		UserRoleDAL: userRole,
	}
	apiRole := &api.Role{
		RoleUC: usecaseRole,
	}
	user := &reposetory.User{
		DB: db,
	}
	usecaseUser := &usecase.User{
		Cache:       cacher,
		Trans:       trans,
		UserDAL:     user,
		UserRoleDAL: userRole,
	}
	apiUser := &api.User{
		UserUC: usecaseUser,
	}
	login := &usecase.Login{
		Cache:       cacher,
		Auth:        auther,
		UserDAL:     user,
		UserRoleDAL: userRole,
		MenuDAL:     menu,
		UserBIZ:     usecaseUser,
	}
	apiLogin := &api.Login{
		LoginUC: login,
	}
	casbinx := &account.Casbinx{
		Cache:           cacher,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleDAL:         role,
	}
	accountModules := &account.AccountModules{
		DB:       db,
		MenuAPI:  apiMenu,
		RoleAPI:  apiRole,
		UserAPI:  apiUser,
		LoginAPI: apiLogin,
		Casbinx:  casbinx,
	}
	logger := &dal.Logger{
		DB: db,
	}
	bizLogger := &biz.Logger{
		LoggerDAL: logger,
	}
	apiLogger := &api2.Logger{
		LoggerBIZ: bizLogger,
	}
	sysSYS := &sys.SYS{
		DB:        db,
		LoggerAPI: apiLogger,
	}
	modsMods := &mods.Mods{
		AccountModules: accountModules,
		SYS:            sysSYS,
	}
	injector := &Injector{
		DB:    db,
		Cache: cacher,
		Auth:  auther,
		M:     modsMods,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
